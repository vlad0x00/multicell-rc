#!/usr/bin/env python3

import numpy as np
from pyDOE import lhs
from multiprocessing import Pool
import os
from os.path import realpath, dirname, join, isfile
import shutil
import subprocess

num_params = 10
num_samples = 1000
iterations = 5
processes = 40
root_dir = dirname(dirname(realpath(__file__)))
executable = join(root_dir, "run")

# Prefix, range, transformation (for lambda -> alpha)
# Range type determines whether param is int or float
params_properties = [
  [ "--genes",                     [ 10, 500    ],                           ],
  [ "--cells",                     [ 10, 5000   ],                           ],
  [ "--cell-types",                [ 1, 1000    ],                           ],
  [ "--output-gene-fraction",      [ 0.1, 1.0   ],                           ],
  [ "--output-cell-type-fraction", [ 0.1, 1.0   ],                           ],
  [ "--alpha",                     [ 2.5, 50.0  ], lambda l : 5.0 / (l ** 2) ],
  [ "--cytokines",                 [ 1, 100     ],                           ],
  [ "--secretion-high",            [ 1.0, 200.0 ],                           ],
  [ "--cytokine-threshold",        [ 0.1, 10.0  ],                           ],
  [ "--grid-spacing",              [ 2.1, 5.0   ],                           ],
]

lhd = lhs(num_params, samples=num_samples)

params = [ ( [ 0 ] * num_params, ) for _ in range(num_samples) ]
for sample_idx, sample in enumerate(lhd):
  for param_idx, param_properties in enumerate(params_properties):
    param_prefix = param_properties[0]
    param_range = param_properties[1]
    val = sample[param_idx] * (param_range[1] - param_range[0]) + param_range[0]
    if len(param_properties) == 3: val = param_properties[2](val)
    val = round(val, 6)
    if type(param_range[0]) == int: val = int(val)
    params[sample_idx][0][param_idx] = param_prefix + " " + str(val)

if not isfile(join(root_dir, "model/libmodel.DP.SPAGENT.so")):
  subprocess.run([ "cd " + join(root_dir, "model") + "; make" ], shell=True)

results_dir = join(root_dir, "utils/results")
shutil.rmtree(results_dir, ignore_errors=True)
os.mkdir(results_dir)

def do_run(param_set):
  out_prefix = "output-" + "_".join([ param.replace(" ", "_").replace("--", "") for param in param_set ])
  with open(join(results_dir, out_prefix + "-stdout"), "w") as out, open(join(results_dir, out_prefix + "-stderr"), "w") as err:
    print("Params:", param_set, file=out)
    for i in range(iterations):
      print("Iteration:", i + 1, file=out)
      tempdir = out_prefix + "-#" + str(i)
      output = subprocess.run([ executable, "-O", tempdir ] + param_set, capture_output=True, text=True)
      print(output.stdout, file=out)
      print(output.stderr, file=err)
      shutil.rmtree(tempdir)

with Pool(processes) as pool:
  pool.starmap(do_run, params)