#!/usr/bin/env python3

"""
  Loads the args.csv file and run parallel simulations on them. Outputs a results.csv file in the end.
"""

import os
from os.path import realpath, dirname, join, isfile
import sys
import shutil
import subprocess
import csv
import uuid
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import math
import multicell_rc_params
from multiprocessing import Pool
sns.set(font_scale=1.1)

iterations = 5
processes = 60
this_dir = dirname(realpath(__file__))
root_dir = dirname(this_dir)
executable = join(root_dir, "run")

# Build the Biocellion model if it hasn't been built.
if not isfile(join(root_dir, "model/libmodel.DP.SPAGENT.so")):
  subprocess.run([ "cd " + join(root_dir, "model") + "; make" ], shell=True)

# Remove the results dir of any previous runs.
results_dir = join(this_dir, "results")
shutil.rmtree(results_dir, ignore_errors=True)
os.mkdir(results_dir)

# This function is ran within a single process and performs all the simulation iterations for an argument set
def do_run(arg_set):
  out_prefix = "output-" + str(uuid.uuid4())
  with open(join(results_dir, out_prefix + "-stdout"), "w") as out, open(join(results_dir, out_prefix + "-stderr"), "w") as err:
    print("Args:", ' '.join(arg_set), file=out, flush=True)
    for i in range(iterations):
      print("Iteration:", i + 1, file=out, flush=True)
      tempdir = out_prefix + "-#" + str(i)
      args = [ executable, "-O", tempdir ] + arg_set
      subprocess.run(args, stdout=out, stderr=err, text=True)
      shutil.rmtree(tempdir, ignore_errors=True)

# Loads the args
args = []
with open(join(this_dir, "args.csv"), 'r') as f:
  csv_reader = csv.reader(f, delimiter=',')
  for i, row in enumerate(csv_reader):
    if i == 0:
      columns = row
    else:
      arg_set = []
      for j, column in enumerate(columns):
        if j == 0: continue
        arg_set.append(column)
        if row[j].strip() != '':
          arg_set.append(row[j])
      args.append((arg_set,))

# Run them processes!
os.chdir(root_dir)
print("Running simulations... ", end='', flush=True)
with Pool(processes) as pool:
  pool.starmap(do_run, args)
print("Done!")

print("Gathering results... ", end='', flush=True)
total_files = 0
valid_files = 0

# Save all data into the dictionary
data = { 'Accuracy' : [], 'Input receiver cells fraction' : [] }

# Iterate the results dir for output files
for dirpath, dirnames, filenames in os.walk(join(this_dir, 'results')):
  for filename in filenames:
    if os.path.basename(filename).endswith('stdout'):
      total_files += 1
      with open(os.path.join(dirpath, filename), 'r') as f:
        args_found = False
        input_cells_found = False
        accuracy_found = False
        for line in f:
          if line.startswith('Args: '):
            # Loads the arguments provided in the output file instead of assuming which ones exist
            args = multicell_rc_params.parse_args(line.replace('Args: ', '').split())
            args_found = True
          if line.startswith('Cell input signal:'):
            input_cells = float(line.split()[6][1:-2]) / 100.0
            bad_cells = float(line.split()[11][1:-2]) / 100.0
            input_cells -= bad_cells
            input_cells_found = True
          if line.startswith('Testing accuracy:'):
            assert args_found
            # Load the arg values every time Testing accuracy is encountered for multiple iteration simulations
            for arg in vars(args):
              argname = arg.replace('_', ' ').capitalize()
              argval = getattr(args, arg)
              if argname in data:
                data[argname].append(argval)
              else:
                data[argname] = [ argval ]

            assert input_cells_found
            assert 0.0 <= input_cells <= 1.0
            data['Input receiver cells fraction'].append(input_cells)

            accuracy = float(line.split()[2])
            assert 0.0 <= accuracy <= 1.0
            data['Accuracy'].append(accuracy)
            accuracy_found = True

        # Keep track of how many simulations were successful
        if args_found and accuracy_found and input_cells_found: valid_files += 1

print("Done!")
print("Valid / total files: {} / {} ({}%)".format(valid_files, total_files, valid_files / total_files * 100))

# Save to CSV
data = pd.DataFrame(data)
data.to_csv(join(this_dir, 'results.csv'))