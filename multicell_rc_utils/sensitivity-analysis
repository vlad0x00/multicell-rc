#!/usr/bin/env python3

"""
  Performs sensitivity analysis on the results of run_args script, i.e. results.csv.
"""

import csv
import sys
import os
import copy
import numpy as np
import pandas as pd
from scipy import stats, linalg
import matplotlib.pyplot as plt
import seaborn as sns
import subprocess

def partial_corr(C):
  """
  Returns the sample linear partial correlation coefficients between pairs of variables in C, controlling 
  for the remaining variables in C.
  Parameters
  ----------
  C : array-like, shape (n, p)
      Array with the different variables. Each column of C is taken as a variable
  Returns
  -------
  P : array-like, shape (p, p)
      P[i, j] contains the partial correlation of C[:, i] and C[:, j] controlling
      for the remaining variables in C.

  V : array-like, shape (p, p)
      V[i, j] contains the p-value of C[:, i] and C[:, j] partial correlation.

  R : array-like, shape (p, p, 2, n)
      V[i, j, k, l] contains the partial residues of C[l, i] and C[l, j] for variable
      at column i (k = 0) and column j (k = 1).
  """
  
  C = np.asarray(C)
  n = C.shape[0]
  C = np.column_stack((C, np.ones(n)))
  p = C.shape[1]

  P_corr = np.zeros((p, p), dtype=np.float)
  V = np.zeros((p, p), dtype=np.float)
  R = np.zeros((p, p, 2, n), dtype=np.float)
  
  for i in range(p):
    P_corr[i, i] = 1
    V[i, i] = 0
    for j in range(i + 1, p):
      idx = np.ones(p, dtype=np.bool)
      idx[i] = False
      idx[j] = False
      beta_i = linalg.lstsq(C[:, idx], C[:, i])[0]
      beta_j = linalg.lstsq(C[:, idx], C[:, j])[0]

      res_i = C[:, i] - C[:, idx].dot(beta_i)
      res_j = C[:, j] - C[:, idx].dot(beta_j)
      
      corr, p_value = stats.pearsonr(res_i, res_j)
      P_corr[i, j] = corr
      P_corr[j, i] = corr
      V[i, j] = p_value
      V[j, i] = p_value
      R[i, j, 0, :] = res_i
      R[i, j, 1, :] = res_j
      R[j, i, 0, :] = res_i
      R[j, i, 1, :] = res_j
      
  return P_corr, V, R

results = pd.read_csv('results.csv')

del results[results.columns[0]]
columns_wo_accuracy = list(copy.deepcopy(results.columns))
assert columns_wo_accuracy[0] == 'Accuracy'
del columns_wo_accuracy[0]
results = results.groupby(columns_wo_accuracy, as_index=False).mean()
results = results[[ 'Accuracy' ] + columns_wo_accuracy]
results.reset_index(inplace=True)

sns.set_theme(font_scale=2.1, style='white')
fig, ax = plt.subplots()
fig.set_size_inches(14.03, 7)
sns.histplot(data=results, x='Accuracy', ax=ax, bins=50, stat='probability')
ax.set_ylabel("Fraction", rotation=0, labelpad=70)
fig.tight_layout()
fig.savefig("sensitivity_analysis_accuracies.png")
plt.close(fig)

# Extract only non-constant columns
results_of_interest = pd.DataFrame()
for i, column in enumerate(results.columns):
  if i == 0: continue
  if not all(x == results[column][0] for x in results[column]):
    results_of_interest[column] = results[column]

# Rank their values
ranked_results_of_interest = stats.rankdata(results_of_interest.T.values, axis=1).T

prcc, pvals, partial_vals = partial_corr(ranked_results_of_interest)

sensitivity_results = pd.DataFrame(columns=[ "Param", "Correlation", "P-value", "Range" ])

from pandas.plotting import table 

# Make a table of results and plot the partially corrected variables
sns.set_theme(font_scale=1.2, style='white')
for i, param in enumerate(results_of_interest.columns):
  if i == 0:
    assert param == 'Accuracy'
    continue
  minval = min(results[param])
  maxval = max(results[param])
  if type(minval) == float: minval = round(minval, 2)
  if type(maxval) == float: maxval = round(maxval, 2)
  sensitivity_results.loc[i] = [ param, prcc[i, 0], pvals[i, 0], "[{}, {}]".format(minval, maxval) ]

  datapoints = pd.DataFrame({ "x" : partial_vals[i, 0, 0, :], "y" : partial_vals[i, 0, 1, :] })

  jointplot = sns.jointplot(data=datapoints, x='x', y='y', kind='hex', height=8)
  jointplot.ax_joint.set_xlabel(param)
  jointplot.ax_joint.set_ylabel("Accuracy", rotation=0, labelpad=30)
  plt.tight_layout()
  plt.savefig(param.replace(' ', '_').lower() + "_prcc.png")
sensitivity_results.sort_values(by=['Correlation'], ascending=False, inplace=True, ignore_index=True)

sensitivity_results.to_html('sensitivity_analysis.html')
subprocess.run(['wkhtmltopdf', '--page-height', '100', '--page-width', '150', '-T', '0', '-B', '0', '-L', '0', '-R', '0', 'sensitivity_analysis.html', 'sensitivity_analysis.pdf'])
subprocess.run(['magick', 'convert', '-colorspace', 'RGB', '-density', '300', 'sensitivity_analysis.pdf', '-quality', '100', '-transparent', 'white', '-crop', '1600x1000+0+0', '-trim', '+repage', '-background', 'white', '-flatten', 'sensitivity_analysis.png'])

os.remove('sensitivity_analysis.html')
os.remove('sensitivity_analysis.pdf')

subprocess.run([ 'magick', 'convert', '-append', 'sensitivity_analysis.png', 'sensitivity_analysis_accuracies.png', 'sensitivity_analysis.png' ])
os.remove('sensitivity_analysis_accuracies.png')