#!/usr/bin/env python3

"""
  Generate a file with arguments for a number of simulations using
  Latin Hypercube sampling.
"""

import math
import numpy as np
import pandas as pd
from pyDOE import lhs
from scipy.stats import expon

num_samples = 10000
args_file = 'args.csv'
param_round_decimals = 6

# Prefix, range, transformation (for lambda -> alpha)
# Range type (or after transformation, if present) determines whether param is int or float
params_properties = [
  [ "--genes",                     [ 10,  100     ],                                                 ],
  [ "--cells",                     [ 100, 1000    ],                                                 ],
  [ "--cell-types",                [ 1, 20        ],                                                 ],
  [ "--tissue-depth",              [ 0, 0         ],                                                 ],
  [ "--output-gene-fraction",      [ 0.1, 1.0     ],                                                 ],
  [ "--output-cell-fraction",      [ 0.1, 1.0     ],                                                 ],
  [ "--output-cell-type-fraction", [ 0.1, 1.0     ],                                                 ],
  [ "--input-fraction",            [ 0.1, 1.0     ],                                                 ],
  [ "--input-threshold",           [ 0.001, 0.999 ], lambda x : expon(loc=0, scale=1).ppf(x) ** 1.75 ],
  [ "--alpha-cytokines",           [ 2.5, 30.0    ], lambda x : 5.0 / (x ** 2)                       ],
  [ "--cytokines",                 [ 1, 20        ],                                                 ],
  [ "--cytokine-threshold",        [ 0.05, 3.0    ],                                                 ],
  [ "--memory",                    [ 0, 9         ],                                                 ],
  [ "--window",                    [ 3, 3         ],                                                 ],
#  [ "--window",                    [ 0, 2         ], lambda w : 3 + 2 * w                            ],
#  [ "--function",                  [ 0, 1         ], lambda f : 'median' if f == 0 else 'parity'     ],
  [ "--threads",                   [ 2, 2       ],                                                   ],
]

num_params = len(params_properties)

lhd = lhs(num_params, samples=num_samples)

# Initialize the data frame
args = pd.DataFrame()
for param_properties in params_properties:
  param_prefix = param_properties[0]
  param_range = param_properties[1]
  param_type = type(param_range[0]) if len(param_properties) == 2 else type(param_properties[2](param_range[0]))
  types = {
    int : np.int64,
    float : np.float64,
    np.float64 : np.float64,
    str : np.str
  }
  args[param_prefix] = np.zeros(num_samples, dtype=types[param_type])

# Enumerate all samples and parameters and generate arguments
for sample_idx, sample in enumerate(lhd):
  for param_idx, param_properties in enumerate(params_properties):
    param_prefix = param_properties[0]
    param_range = param_properties[1]
    param_type = type(param_range[0]) if len(param_properties) == 2 else type(param_properties[2](param_range[0]))
    if type(param_range[0]) == int:
      range_length = param_range[1] - param_range[0] + 1 # Ensure the integer range is inclusive
    else:
      range_length = param_range[1] - param_range[0]
    sampled_val = sample[param_idx] * range_length + param_range[0]
    if type(param_range[0]) == int: sampled_val = int(sampled_val)
    if len(param_properties) == 2:
      val = sampled_val
    else:
      val = param_properties[2](sampled_val) # Do parameter transformation is available (e.g. lambda -> alpha)
    if param_type == int:
      val = int(val)
    elif param_type == float:
      val = round(val, param_round_decimals)
    args.loc[sample_idx, param_prefix] = val

# Ensure generated arguments cover the provided ranges
for param_properties in params_properties:
  param_prefix = param_properties[0]
  param_range = param_properties[1]
  param_type = type(param_range[0]) if len(param_properties) == 2 else type(param_properties[2](param_range[0]))

  minval = min(args[param_prefix])
  maxval = max(args[param_prefix])

  if len(param_properties) == 3:
    transformed_param_range = (param_properties[2](param_range[0]), param_properties[2](param_range[1]))
    if transformed_param_range[0] > transformed_param_range[1]:
      transformed_param_range = (transformed_param_range[1], transformed_param_range[0])
  else:
    transformed_param_range = param_range

  if param_type == int:
    assert minval == transformed_param_range[0]
    assert maxval == transformed_param_range[1]
  elif param_type == float:
    assert abs(minval - transformed_param_range[0]) < 0.01
    assert abs(maxval - transformed_param_range[1]) < 0.01

# Save into CSV
args.to_csv(args_file)