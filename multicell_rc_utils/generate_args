#!/usr/bin/env python3

"""
  Generate a file with arguments for a number of simulations using
  Latin Hypercube sampling.
"""

import math
import numpy as np
import pandas as pd
from pyDOE import lhs

num_samples = 5000
args_file = 'args.csv'
param_round_decimals = 6

# Prefix, range, transformation (for lambda -> alpha)
# Range type determines whether param is int or float
params_properties = [
  [ "--genes",                     [ 10, 100    ],                           ],
  [ "--cells",                     [ 100, 1000  ],                           ],
  [ "--cell-types",                [ 1, 20      ],                           ],
  [ "--output-gene-fraction",      [ 0.1, 1.0   ],                           ],
  [ "--output-cell-fraction",      [ 0.1, 1.0   ],                           ],
  [ "--output-cell-type-fraction", [ 0.1, 1.0   ],                           ],
  [ "--input-fraction",            [ 0.1, 1.0   ],                           ],
  [ "--alpha-cytokines",           [ 2.5, 30.0  ], lambda l : 5.0 / (l ** 2) ],
  [ "--cytokines",                 [ 1, 20      ],                           ],
  [ "--cytokine-threshold",        [ 0.05, 3.0  ],                           ],
  [ "--input-threshold",           [ 0.1, 1.5   ],                           ],
  [ "--memory",                    [ 0, 9       ],                           ],
]

num_params = len(params_properties)

lhd = lhs(num_params, samples=num_samples)

# Initialize the data frame
args = pd.DataFrame()
for param_properties in params_properties:
  param_prefix = param_properties[0]
  param_range = param_properties[1]
  if type(param_range[0]) == int:
    args[param_prefix] = np.zeros(num_samples, dtype=np.int64)
  else:
    args[param_prefix] = np.zeros(num_samples, dtype=np.float64)

# Enumerate all samples and parameters and generate arguments
for sample_idx, sample in enumerate(lhd):
  for param_idx, param_properties in enumerate(params_properties):
    param_prefix = param_properties[0]
    param_range = param_properties[1]
    if type(param_range[0]) == int:
      range_length = param_range[1] - param_range[0] + 1 # Ensure the integer range is inclusive
    else:
      range_length = param_range[1] - param_range[0]
    val = sample[param_idx] * range_length + param_range[0]
    if len(param_properties) == 3: val = param_properties[2](val) # Do parameter transformation is available (lambda -> alpha)
    if type(param_range[0]) == int:
      val = int(val)
    else:
      val = round(val, param_round_decimals)
    args.loc[sample_idx, param_prefix] = val

# Ensure generated arguments cover the provided ranges
for param_properties in params_properties:
  param_prefix = param_properties[0]
  param_range = param_properties[1]
  minval = min(args[param_prefix]) 
  maxval = max(args[param_prefix])
  if type(param_range[0]) == int:
    assert minval == param_range[0]
    assert maxval == param_range[1]
  else:
    if len(param_properties) == 3:
      transformed_param_range = (param_properties[2](param_range[0]), param_properties[2](param_range[1]))
      if transformed_param_range[0] > transformed_param_range[1]:
        transformed_param_range = (transformed_param_range[1], transformed_param_range[0])
      assert abs(minval - transformed_param_range[0]) < 0.01
      assert abs(maxval - transformed_param_range[1]) < 0.01
    else:
      assert abs(minval - param_range[0]) < 0.01
      assert abs(maxval - param_range[1]) < 0.01

# Save into CSV
args.to_csv(args_file)