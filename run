#!/usr/bin/env python3

import os
import sys
import math
import shutil
import subprocess

from utils import utils

args = utils.parse_args()

MODEL_DIR = "model/"
BIOCELLION_DIR = "biocellion/"
OUTPUT_DIR = args.output
BIOCELLION_BIN = BIOCELLION_DIR + "framework/main/biocellion.DP.SPAGENT.OPT"
BIOCELLION_OUTPUT_FILE = os.path.join(OUTPUT_DIR, "biocellion_output")
PARAMS_FILE = os.path.join(OUTPUT_DIR, "params.xml")
NV_FILE = os.path.join(OUTPUT_DIR, "nv")
VARF_FILE = os.path.join(OUTPUT_DIR, "varf")
TT_FILE = os.path.join(OUTPUT_DIR, "tt")
GENE_INITIAL_STATES_FILE = os.path.join(OUTPUT_DIR, "gene_initial_states")
DOT_FILE = os.path.join(OUTPUT_DIR, "gene_networks.dot")
NUM_GENES = 1 + args.cytokines * 2 + args.genes
NUM_CELLS = args.cells
NUM_CELL_TYPES = args.cell_types
CONNECTIVITY = args.degree
ALPHA = args.alpha
BETA = args.beta
NUM_CYTOKINES = args.cytokines
INPUT_CONNECTIONS = math.ceil((NUM_GENES - (1 + NUM_CYTOKINES)) * args.input_fraction)
DIRICHLET_BOUNDARY = args.dirichlet_boundary
INPUT_THRESHOLD = args.input_threshold
SECRETION_LOW = args.secretion_low
SECRETION_HIGH = args.secretion_high
CYTOKINE_THRESHOLD = args.cytokine_threshold
CELL_RADIUS = args.cell_radius
IF_GRID_SPACING = args.grid_spacing
NUM_OUTPUT_GENES = math.ceil(args.genes * args.output_gene_fraction)
NUM_OUTPUT_CELLS = math.ceil(NUM_CELLS * args.output_cell_fraction)
NUM_OUTPUT_CELL_TYPES = math.ceil(NUM_CELL_TYPES * args.output_cell_type_fraction)
SIMULATION_STEPS = args.steps
DELAY = args.memory
WINDOW_SIZE = args.window_size
INPUT_SIGNAL_FILE = os.path.join(OUTPUT_DIR, "input_signal")
INPUT_SIGNAL_LENGTH = SIMULATION_STEPS + 1
FUNCTION = args.function
VISUALIZE = args.visualize
NEW = not args.reuse
THREADS = args.threads
WARMUP_STEPS = args.warmup_steps

assert SIMULATION_STEPS > WARMUP_STEPS
assert CELL_RADIUS <= IF_GRID_SPACING

os.environ['OPENBLAS_NUM_THREADS'] = str(args.threads)
os.environ['OMP_NUM_THREADS'] = str(args.threads)
os.environ['MKL_NUM_THREADS'] = str(args.threads)
os.environ['BLIS_NUM_THREADS'] = str(args.threads)
os.environ['NUMEXPR_NUM_THREADS'] = str(args.threads)
os.environ['VECLIB_MAXIMUM_THREADS'] = str(args.threads)

shutil.rmtree(OUTPUT_DIR, ignore_errors=True)
os.makedirs(OUTPUT_DIR)

ADDITIONAL_PARAMS = str(NUM_GENES) + " " + str(NUM_CELLS) + " " + str(NUM_CELL_TYPES) + " " + NV_FILE + " " + VARF_FILE + " " + TT_FILE + " " + GENE_INITIAL_STATES_FILE + " " + INPUT_SIGNAL_FILE + " " + str(ALPHA) + " " + str(BETA) + " " + str(NUM_CYTOKINES) + " " + str(SECRETION_LOW) + " " + str(SECRETION_HIGH) + " " + str(CYTOKINE_THRESHOLD) + " " + str(CELL_RADIUS) + " " + str(IF_GRID_SPACING) + " " + str(DIRICHLET_BOUNDARY) + " " + str(INPUT_THRESHOLD)

LD_CMD = "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:" + MODEL_DIR

if not os.path.exists(os.path.join(MODEL_DIR, "libmodel.DP.SPAGENT.so")):
  subprocess.run([ "cd model; make" ], shell=True)

if not VISUALIZE:
  if os.path.isfile(DOT_FILE):
      filename, file_extension = os.path.splitext(DOT_FILE)
      os.remove(DOT_FILE)
      os.remove(filename + ".png")
  DOT_FILE = None

if NEW:
  print("Generating initial gene network(s) state(s), functions, and input signal... ", end='', flush=True)
  utils.generate_gene_functions(NUM_CELL_TYPES, NUM_GENES, CONNECTIVITY, INPUT_CONNECTIONS, NUM_CYTOKINES, NV_FILE, VARF_FILE, TT_FILE, DOT_FILE)
  utils.generate_input_signal(INPUT_SIGNAL_LENGTH, INPUT_SIGNAL_FILE)
  utils.generate_gene_initial_states(NUM_GENES, NUM_CELLS, NUM_CYTOKINES, INPUT_SIGNAL_FILE, GENE_INITIAL_STATES_FILE)
  print("Done!", flush=True)
utils.make_params_xml(PARAMS_FILE, OUTPUT_DIR, SIMULATION_STEPS, ADDITIONAL_PARAMS, THREADS)

print("Running Biocellion... ", end='', flush=True)
os.system(LD_CMD + " " + BIOCELLION_BIN + " " + PARAMS_FILE + " >" + BIOCELLION_OUTPUT_FILE)
print("Done!", flush=True)

print("Training LASSO... ", end='', flush=True)
train_accuracy, test_accuracy, coeff_used, coeff_max, cells_correct_input = utils.train_lasso(INPUT_SIGNAL_FILE, BIOCELLION_OUTPUT_FILE, OUTPUT_DIR, NUM_GENES, NUM_CELLS, NUM_OUTPUT_GENES, NUM_OUTPUT_CELLS, NUM_OUTPUT_CELL_TYPES, WINDOW_SIZE, DELAY, SIMULATION_STEPS, FUNCTION, VISUALIZE, THREADS, WARMUP_STEPS)
print("Done!", flush=True)
print("Training accuracy:", train_accuracy)
print("Testing accuracy:", test_accuracy)
print("Number of features used: {} / {}".format(coeff_used, coeff_max))
print("Cells with correct input signal: {} / {}".format(cells_correct_input, NUM_CELLS))