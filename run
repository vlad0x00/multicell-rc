#!/usr/bin/env python3

import os
import sys
import argparse
import math
import shutil

import bcell_utils

def zeroplus_int(s):
  i = int(s)
  if i < 0: raise argparse.ArgumentTypeError(s + " is invalid, please input an integer >=0.")
  return i

def abovezero_int(s):
  i = int(s)
  if i <= 0: raise argparse.ArgumentTypeError(s + " is invalid, please input an integer >0.")
  return i

def zeroplus_float(s):
  f = float(s)
  if f < 0: raise argparse.ArgumentTypeError(s + " is invalid, please input a float >=0.")
  return f

def abovezero_float(s):
  f = float(s)
  if f <= 0: raise argparse.ArgumentTypeError(s + " is invalid, please input a float >0.")
  return f

def fraction_type(s):
  f = float(s)
  if f < 0 or f > 1: raise argparse.ArgumentTypeError(s + " is invalid, please input a number >=0 and <=1.")
  return f

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-g', '--genes', type=abovezero_int, default=50, help="Number of genes per cell.")
parser.add_argument('-c', '--cells', type=abovezero_int, default=1, help="Number of cells in the simulation.")
parser.add_argument('-t', '--cell-types', type=abovezero_int, default=1, help="Number of cell types in the simulation.")
parser.add_argument('-d', '--degree', type=abovezero_int, default=2, help="Average node in-degree of gene network(s).")
parser.add_argument('-i', '--input-fraction', type=fraction_type, default=0.5, help="Fraction of nodes connected to the input signal.")
parser.add_argument('-a', '--alpha', type=zeroplus_float, default=0.0003, help="Molecular decay rate.")
parser.add_argument('-b', '--beta', type=zeroplus_float, default=0.6, help="Grid diffusion coefficient.")
parser.add_argument('-k', '--cytokines', type=zeroplus_int, default=3, help="Number of cytokines in the simulation.")
parser.add_argument('-x', '--secretion-low', type=zeroplus_float, default=1.0, help="Cytokine secretion when the gene is off.")
parser.add_argument('-y', '--secretion-high', type=zeroplus_float, default=25.0, help="Cytokine secretion when the gene is on.")
parser.add_argument('-l', '--cytokine-threshold', type=zeroplus_float, default=0.35, help="Cytokine threshold to turn a gene on.")
parser.add_argument('-s', '--steps', type=abovezero_int, default=150, help="Number of simulation steps.")
parser.add_argument('-m', '--memory', type=zeroplus_int, default=0, help="Step delay between input signal and output layer prediction.")
parser.add_argument('-w', '--window-size', type=abovezero_int, default=3, help="Window size of predicted functions.")
parser.add_argument('-r', '--randomize', action='store_true', help="Generate random initial gene network states, functions, and input signal. Otherwise use existing.")
parser.add_argument('-z', '--visualize', action='store_true', help="Generate a dot file of the gene network model and every state of the simulation for visualization and debugging.")
args = parser.parse_args()

MODEL_DIR = "model/"
BIOCELLION_DIR = "biocellion/"
OUTPUT_DIR = "output/"
BIOCELLION_BIN = BIOCELLION_DIR + "framework/main/biocellion.DP.SPAGENT.OPT"
BIOCELLION_OUTPUT_FILE = OUTPUT_DIR + "biocellion_output"
PARAMS_FILE = MODEL_DIR + "params.xml"
NV_FILE = MODEL_DIR + "nv"
VARF_FILE = MODEL_DIR + "varf"
TT_FILE = MODEL_DIR + "tt"
GENE_INITIAL_STATES_FILE = MODEL_DIR + "gene_initial_states"
DOT_FILE = MODEL_DIR + "gene_networks.dot"
NUM_GENES = args.genes
NUM_CELLS = args.cells
NUM_CELL_TYPES = args.cell_types
CONNECTIVITY = args.degree
INPUT_CONNECTIONS = math.ceil(NUM_GENES * args.input_fraction)
ALPHA = args.alpha
BETA = args.beta
NUM_CYTOKINES = args.cytokines
SECRETION_LOW = args.secretion_low
SECRETION_HIGH = args.secretion_high
CYTOKINE_THRESHOLD = args.cytokine_threshold
NUM_OUTPUT_GENES = NUM_GENES
SIMULATION_STEPS = args.steps
DELAY = args.memory
WINDOW_SIZE = args.window_size
INPUT_SIGNAL_FILE = MODEL_DIR + "input_signal"
INPUT_SIGNAL_LENGTH = SIMULATION_STEPS + 1
LASSO_ALPHA = 0.005

shutil.rmtree(OUTPUT_DIR)
os.makedirs(OUTPUT_DIR)

ADDITIONAL_PARAMS = str(NUM_GENES) + " " + str(NUM_CELLS) + " " + str(NUM_CELL_TYPES) + " " + NV_FILE + " " + VARF_FILE + " " + TT_FILE + " " + GENE_INITIAL_STATES_FILE + " " + INPUT_SIGNAL_FILE + " " + str(ALPHA) + " " + str(BETA) + " " + str(NUM_CYTOKINES) + " " + str(SECRETION_LOW) + " " + str(SECRETION_HIGH) + " " + str(CYTOKINE_THRESHOLD)

LD_CMD = "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:" + MODEL_DIR

if not args.visualize:
  if os.path.isfile(DOT_FILE):
      os.remove(DOT_FILE)
  DOT_FILE = None

if args.randomize:
  print("Generating initial gene network(s) state(s), functions, and input signal... ", end='', flush=True)
  bcell_utils.generate_gene_functions(NUM_CELL_TYPES, NUM_GENES, CONNECTIVITY, INPUT_CONNECTIONS, NUM_CYTOKINES, NV_FILE, VARF_FILE, TT_FILE, DOT_FILE)
  bcell_utils.generate_input_signal(INPUT_SIGNAL_LENGTH, INPUT_SIGNAL_FILE)
  bcell_utils.generate_gene_initial_states(NUM_GENES, NUM_CELLS, INPUT_SIGNAL_FILE, GENE_INITIAL_STATES_FILE)
  print("Done!", flush=True)
bcell_utils.make_params_xml(PARAMS_FILE, OUTPUT_DIR, SIMULATION_STEPS, ADDITIONAL_PARAMS)

print("Running Biocellion... ", end='', flush=True)
os.system(LD_CMD + " " + BIOCELLION_BIN + " " + PARAMS_FILE + " >" + BIOCELLION_OUTPUT_FILE)
print("Done!", flush=True)

print("Training LASSO... ", end='', flush=True)
bcell_utils.train_lasso(INPUT_SIGNAL_FILE, BIOCELLION_OUTPUT_FILE, OUTPUT_DIR, NUM_GENES, NUM_OUTPUT_GENES, NUM_CELLS, WINDOW_SIZE, DELAY, SIMULATION_STEPS, args.visualize)
print("Done!", flush=True)